"""
BaseStrategy - Abstract base class for all trading strategies
"""

from abc import ABC, abstractmethod
from dataclasses import dataclass
from typing import TYPE_CHECKING

if TYPE_CHECKING:
    from ..decision.engine import FusedContext


@dataclass
class StrategySignal:
    """
    Signal generated by a strategy.

    Attributes:
        action: Trading action (BUY, SELL, HOLD)
        confidence: Strategy confidence (0.0-1.0)
        stop_loss: Stop loss price (optional)
        take_profit: Take profit price (optional)
        reasoning: Human-readable reasoning
        metadata: Additional strategy-specific data
    """
    action: str  # BUY, SELL, HOLD
    confidence: float
    stop_loss: float | None = None
    take_profit: float | None = None
    reasoning: str = ""
    metadata: dict | None = None


class BaseStrategy(ABC):
    """
    Abstract base class for all trading strategies.

    All strategies must implement:
    - evaluate(): Check if strategy conditions are met
    - generate_signal(): Generate trading signal
    """

    def __init__(self, dsl: dict):
        """
        Initialize strategy with DSL definition.

        Args:
            dsl: Strategy definition dictionary (validated against schema)
        """
        self.dsl = dsl
        self.name = dsl["name"]
        self.description = dsl["description"]
        self.metadata = dsl["metadata"]
        self.conditions = dsl["conditions"]
        self.action = dsl["action"]
        self.risk = dsl["risk"]

    @abstractmethod
    def evaluate(self, context: "FusedContext") -> bool:
        """
        Evaluate if strategy conditions are met.

        Args:
            context: Current market context

        Returns:
            True if all conditions are met, False otherwise
        """
        pass

    @abstractmethod
    def generate_signal(self, context: "FusedContext") -> StrategySignal:
        """
        Generate trading signal based on context.

        Args:
            context: Current market context

        Returns:
            StrategySignal with action, confidence, SL/TP
        """
        pass

    def is_active(self, context: "FusedContext") -> bool:
        """
        Check if strategy is active in current market regime.

        Args:
            context: Current market context

        Returns:
            True if strategy is active, False otherwise
        """
        # Check if regime is specified
        if "active_regimes" not in self.metadata:
            return True

        # Check if current regime is in active regimes
        if context.regime is None:
            return True

        return context.regime in self.metadata["active_regimes"]

    def __repr__(self) -> str:
        return f"<Strategy: {self.name} v{self.metadata['version']}>"
